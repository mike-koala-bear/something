name: Continuous Lichess Bot (8PM-2AM)

on:
  workflow_dispatch:
    inputs:
      tournament_id:
        description: "Tournament ID to auto-join"
        required: true
      team_id:
        description: "Team ID for the battle"
        required: true
      additional_command:
        description: "Optional commands to pass"
        required: false
        default: ""

permissions:
  actions: write
  contents: read

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 355 # Just under 6h
    env:
      LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Copy private config
        uses: actions/checkout@v5
        with:
          repository: mike-koala-bear/tacticalbot-config
          token: ${{ secrets.PRIVATE_CONFIG_TOKEN }}
          path: tacticalbot-config

      - name: Inject Bot Token
        run: |
          cp tacticalbot-config/config.yml ./config.yml
          sed -i "s/tokenXXXXX/${{ secrets.LICHESS_TOKEN }}/g" config.yml

      - name: Run bot
        run: |
          TOURNAMENT_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          ADDITIONAL_CMD=${{ toJSON(github.event.inputs.additional_command) }}

          # Start matchmaking while waiting for tournament
          echo "Starting matchmaking..."
          python3 -u user_interface.py matchmaking &
          MM_PID=$!

          # Wait for tournament start
          echo "Waiting for tournament $TOURNAMENT_ID..."
          while true; do
              STATUS=$(curl -s -H "Authorization: Bearer $LICHESS_TOKEN" \
                "https://lichess.org/api/tournament/$TOURNAMENT_ID" | jq -r '.status')
              if [ "$STATUS" == "started" ]; then
                  echo "Tournament started!"
                  break
              fi
              sleep 5
          done

          # Stop matchmaking
          kill -SIGTERM $MM_PID || true

          # Run tournament
          CMD="python3 -u user_interface.py tournament $TOURNAMENT_ID $TEAM_ID"
          [ -n "$ADDITIONAL_CMD" ] && CMD="$CMD $ADDITIONAL_CMD"
          echo "Running tournament bot: $CMD"
          eval "$CMD" &
          BOT_PID=$!

          # Monitor 2AM end (job timeout safe exit)
          END=$(( $(date -d "02:00 next day" +%s) ))
          (
            while kill -0 $BOT_PID 2>/dev/null; do
              NOW=$(date +%s)
              if [ "$NOW" -ge "$END" ]; then
                echo "Reached 2AM. Leaving tournament..."
                python3 user_interface.py leave_tournament "$TOURNAMENT_ID"
                kill -SIGTERM $BOT_PID
                break
              fi
              sleep 10
            done
          ) &

          wait $BOT_PID
          echo "Workflow 1 finished."
