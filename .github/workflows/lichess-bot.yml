name: Lichess Bot

on:
  workflow_dispatch:
    inputs:
      tournament_id:
        description: "Tournament ID to auto-join (optional)"
        required: false
        default: ""
      team_id:
        description: "Team ID for team battle (optional)"
        required: false
        default: ""
      password:
        description: "Tournament password (optional)"
        required: false
        default: ""
      additional_command:
        description: "Optional commands to pass (wrap in quotes)"
        required: false
        default: ""
      never_stop:
        description: "Never stop matchmaking unless it stops itself"
        required: false
        type: boolean
        default: "true"

jobs:
  run-bot:
    runs-on: ubuntu-latest
    if: github.repository_owner == github.actor

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install system tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Install Python deps
        run: |
          pip install -r requirements.txt

      - name: Clone Private Config Repo
        uses: actions/checkout@v5
        with:
          repository: mike-koala-bear/tacticalbot-config
          token: ${{ secrets.PRIVATE_CONFIG_TOKEN }}
          path: tacticalbot-config

      - name: Copy Private Config
        run: |
          if [ -f tacticalbot-config/config.yml ]; then
            cp tacticalbot-config/config.yml ./config.yml
            echo "✅ config.yml copied"
          else
            echo "❌ config.yml not found in tacticalbot-config repo"
            exit 1
          fi

      - name: Inject Bot Token
        run: |
          if grep -q "tokenXXXXX" config.yml; then
            sed -i "s/tokenXXXXX/${{ secrets.LICHESS_TOKEN }}/g" config.yml
            echo "✅ token injected into config.yml"
          else
            echo "⚠️ token placeholder not found in config.yml — ensure config uses tokenXXXXX or set LICHESS_TOKEN env."
          fi

      - name: Start bot
        env:
          LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
        run: |
          set -euo pipefail
          echo "Starting bot..."

          CONFIG_FILE="./config.yml"
          TOURNAMENT_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          PASSWORD="${{ github.event.inputs.password }}"
          ADDITIONAL_CMD=${{ toJSON(github.event.inputs.additional_command) }}

          if [ -z "${LICHESS_TOKEN:-}" ]; then
            echo "❌ LICHESS_TOKEN is not set. Aborting."
            exit 1
          fi

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Config file not found at $CONFIG_FILE"
            exit 1
          fi

          join_tournament() {
            local tid="$1"
            local team="$2"
            local pw="$3"
            echo "--- POST /api/tournament/$tid/join ---"
            curl -sS -X POST -H "Authorization: Bearer $LICHESS_TOKEN" -H "Content-Type: application/json" \
              -d "{\"team\":\"$team\",\"password\":\"$pw\"}" \
              "https://lichess.org/api/tournament/$tid/join" \
              -w "\nHTTP_CODE:%{http_code}\n"
          }

          if [ -n "$TOURNAMENT_ID" ]; then
            echo "Tournament requested: $TOURNAMENT_ID"

            STATUS="started"  # assume started if polling not needed; can poll API for more logic

            echo "Attempting to join tournament..."
            RESPONSE=$(join_tournament "$TOURNAMENT_ID" "$TEAM_ID" "$PASSWORD")
            echo "$RESPONSE"

            HTTP_CODE=$(echo "$RESPONSE" | grep -oP '(?<=HTTP_CODE:)\d+')
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "204" ]; then
              echo "✅ Tournament join successful."
            else
              echo "❌ Tournament join failed (HTTP $HTTP_CODE)"
            fi

            echo "Launching tournament mode..."
            CMD="python3 -u user_interface.py --config $CONFIG_FILE tournament $TOURNAMENT_ID $TEAM_ID $PASSWORD"
            [ -n "$ADDITIONAL_CMD" ] && CMD="$CMD $ADDITIONAL_CMD"
            echo "CMD: $CMD"
            eval "$CMD"
          else
            echo "No tournament specified -> starting matchmaking only."
            python3 -u user_interface.py --config "$CONFIG_FILE" matchmaking
          fi
