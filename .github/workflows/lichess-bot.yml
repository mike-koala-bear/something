name: Lichess Bot

on:
  workflow_dispatch:
    inputs:
      tournament_id:
        description: "Tournament ID to auto-join (optional)"
        required: false
        default: ""
      additional_command:
        description: "Optional commands to pass (wrap in quotes)"
        required: false
        default: ""
      never_stop:
        description: "Never stop matchmaking unless it stops itself"
        required: false
        type: boolean
        default: "true"

jobs:
  run-bot:
    runs-on: ubuntu-latest
    if: github.repository_owner == github.actor

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install system tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Install Python deps
        run: |
          pip install -r requirements.txt

      - name: Clone Private Config Repo
        uses: actions/checkout@v5
        with:
          repository: mike-koala-bear/tacticalbot-config
          token: ${{ secrets.PRIVATE_CONFIG_TOKEN }}
          path: tacticalbot-config

      - name: Copy Private Config
        run: |
          if [ -f tacticalbot-config/config.yml ]; then
            cp tacticalbot-config/config.yml ./config.yml
            echo "✅ config.yml copied"
          else
            echo "❌ config.yml not found in tacticalbot-config repo"
            exit 1
          fi

      - name: Inject Bot Token
        run: |
          if grep -q "tokenXXXXX" config.yml; then
            sed -i "s/tokenXXXXX/${{ secrets.LICHESS_TOKEN }}/g" config.yml
            echo "✅ token injected into config.yml"
          else
            echo "⚠️ token placeholder not found in config.yml — ensure config uses tokenXXXXX or set LICHESS_TOKEN env."
          fi

      - name: Start bot (robust join + matchmaking)
        env:
          LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
        run: |
          set -euo pipefail
          echo "Starting bot..."

          CONFIG_FILE="./config.yml"
          TOURNAMENT_ID="${{ github.event.inputs.tournament_id }}"
          ADDITIONAL_CMD=${{ toJSON(github.event.inputs.additional_command) }}

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Config file not found at $CONFIG_FILE"
            exit 1
          fi

          # Function: attempt to join tournament; prints debug info and returns 0 on success
          join_tournament() {
            local id="$1"
            echo "--- Attempting to join tournament $id ---"
            # POST join; capture body + status code
            resp=$(curl -sS -w "\n%{http_code}" -X POST \
              -H "Authorization: Bearer $LICHESS_TOKEN" \
              "https://lichess.org/api/tournament/$id/join" || true)
            body=$(echo "$resp" | sed '$d' || true)
            code=$(echo "$resp" | tail -n1 || true)
            echo "HTTP status: $code"
            if [ -n "$body" ]; then
              echo "Response body (first 50 lines):"
              echo "$body" | sed -n '1,50p'
            fi

            if [ "$code" = "200" ] || [ "$code" = "204" ]; then
              echo "Join successful (HTTP $code)."
              return 0
            fi

            # Helpful messages for common codes
            if [ "$code" = "403" ]; then
              echo "403 Forbidden: token may lack bot scopes or registration closed to your account."
            elif [ "$code" = "404" ]; then
              echo "404 Not Found: tournament ID may be wrong."
            elif [ "$code" = "422" ]; then
              echo "422 Unprocessable: registration may be closed."
            fi

            return 1
          }

          # Primary control flow
          if [ -n "$TOURNAMENT_ID" ]; then
            echo "Tournament requested: $TOURNAMENT_ID"

            # Keep polling until we either join & play, or fallback to matchmaking if finished
            while true; do
              raw=$(curl -sS -H "Authorization: Bearer $LICHESS_TOKEN" "https://lichess.org/api/tournament/$TOURNAMENT_ID" || true)
              if [ -z "$raw" ]; then
                echo "Warning: empty tournament data; retrying in 5s..."
                sleep 5
                continue
              fi

              status=$(echo "$raw" | jq -r '.status // "unknown"')
              echo "Polled tournament status: $status"

              if [ "$status" = "created" ]; then
                echo "Tournament not started yet -> start matchmaking while waiting."
                python3 -u user_interface.py --config "$CONFIG_FILE" matchmaking &
                MM_PID=$!

                # Wait until status changes from created
                while true; do
                  status=$(curl -sS -H "Authorization: Bearer $LICHESS_TOKEN" "https://lichess.org/api/tournament/$TOURNAMENT_ID" | jq -r '.status // "unknown"' || true)
                  echo "Polled (waiting) status: $status"
                  if [ "$status" != "created" ]; then
                    echo "Status changed to $status. Stopping matchmaking."
                    [ -n "${MM_PID:-}" ] && kill -SIGTERM "$MM_PID" || true
                    wait "${MM_PID:-}" 2>/dev/null || true
                    break
                  fi
                  sleep 5
                done
                # loop continues to handle the new status (started/finished)
              fi

              if [ "$status" = "started" ]; then
                echo "Tournament is in progress — will attempt to join."

                # Retry join up to 6 times
                attempts=0
                joined=1
                while [ $attempts -lt 6 ]; do
                  attempts=$((attempts+1))
                  echo "Join attempt #$attempts ..."
                  if join_tournament "$TOURNAMENT_ID"; then
                    joined=0
                    break
                  fi
                  echo "Join failed; sleeping 4s before next attempt..."
                  sleep 4
                done

                if [ $joined -ne 0 ]; then
                  echo "WARNING: Could not programmatically join the tournament after $attempts attempts."
                  echo "Printing tournament info for debugging:"
                  echo "$raw" | jq -r '.' || true
                  echo "Proceeding to start tournament mode anyway (might fail if not actually joined)."
                fi

                # Launch tournament mode (pass config explicitly)
                CMD="python3 -u user_interface.py --config $CONFIG_FILE tournament $TOURNAMENT_ID"
                [ -n "$ADDITIONAL_CMD" ] && CMD="$CMD $ADDITIONAL_CMD"
                echo "Executing: $CMD"
                eval "$CMD"
                echo "Tournament mode finished (bot exited tournament mode)."
                break
              fi

              if [ "$status" = "finished" ]; then
                echo "Tournament already finished. Starting matchmaking instead."
                CMD="python3 -u user_interface.py --config $CONFIG_FILE matchmaking"
                [ -n "$ADDITIONAL_CMD" ] && CMD="$CMD $ADDITIONAL_CMD"
                echo "Executing: $CMD"
                eval "$CMD"
                break
              fi

              echo "Unhandled tournament status ($status). Retrying in 5s..."
              sleep 5
            done

          else
            echo "No tournament provided -> starting matchmaking only."
            python3 -u user_interface.py --config "$CONFIG_FILE" matchmaking
          fi
