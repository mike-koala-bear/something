name: Lichess Bot

on:
  workflow_dispatch:
    inputs:
      tournament_id:
        description: "Tournament ID to auto-join (optional)"
        required: false
        default: ""
      team_id:
        description: "Team ID for team battles (optional)"
        required: false
        default: ""
      additional_command:
        description: "Optional commands to pass (wrap in quotes)"
        required: false
        default: ""
      never_stop:
        description: "Never stop matchmaking unless it stops itself"
        required: false
        type: boolean
        default: "true"

jobs:
  run-bot:
    runs-on: ubuntu-latest
    if: github.repository_owner == github.actor

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install system tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Install Python deps
        run: |
          pip install -r requirements.txt

      - name: Clone Private Config Repo
        uses: actions/checkout@v5
        with:
          repository: mike-koala-bear/tacticalbot-config
          token: ${{ secrets.PRIVATE_CONFIG_TOKEN }}
          path: tacticalbot-config

      - name: Copy Private Config
        run: |
          if [ -f tacticalbot-config/config.yml ]; then
            cp tacticalbot-config/config.yml ./config.yml
            echo "✅ config.yml copied"
          else
            echo "❌ config.yml not found in tacticalbot-config repo"
            exit 1
          fi

      - name: Inject Bot Token
        run: |
          if grep -q "tokenXXXXX" config.yml; then
            sed -i "s/tokenXXXXX/${{ secrets.LICHESS_TOKEN }}/g" config.yml
            echo "✅ token injected into config.yml"
          else
            echo "⚠️ token placeholder not found in config.yml — ensure config uses tokenXXXXX or set LICHESS_TOKEN env."
          fi

      - name: Start bot (tournament + team support)
        env:
          LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
        run: |
          set -euo pipefail
          echo "Starting bot..."

          CONFIG_FILE="./config.yml"
          TOURNAMENT_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          ADDITIONAL_CMD=${{ toJSON(github.event.inputs.additional_command) }}

          if [ -z "${LICHESS_TOKEN:-}" ]; then
            echo "❌ LICHESS_TOKEN is not set. Aborting."
            exit 1
          else
            echo "✅ LICHESS_TOKEN is present."
          fi

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Config file not found at $CONFIG_FILE"
            exit 1
          fi

          # helper: join tournament with optional team ID
          join_tournament() {
            local tournament="$1"
            local team="$2"
            echo "--- POST /api/tournament/$tournament/join ---"

            # Build API URL with team parameter if present
            api_url="https://lichess.org/api/tournament/$tournament/join"
            if [ -n "$team" ]; then
              api_url="$api_url?team=$team"
            fi

            join_resp=$(curl -sS -X POST -H "Authorization: Bearer $LICHESS_TOKEN" -w "\n%{http_code}\n%{content_type}" \
              "$api_url" || true)
            join_code=$(echo "$join_resp" | tail -n2 | head -n1)
            join_ctype=$(echo "$join_resp" | tail -n1)
            join_body=$(echo "$join_resp" | sed '$d' | sed '$d' || true)
            echo "Join HTTP: $join_code   content-type: $join_ctype"
            if [ -n "$join_body" ]; then
              echo "Join body (preview):"
              echo "$join_body" | sed -n '1,80p'
            fi
            if [ "$join_code" = "200" ] || [ "$join_code" = "204" ]; then
              echo "✅ join success (HTTP $join_code)"
              return 0
            fi
            echo "❌ join failed (HTTP $join_code)"
            return 1
          }

          # Primary loop
          if [ -n "$TOURNAMENT_ID" ]; then
            echo "Tournament requested: $TOURNAMENT_ID"

            while true; do
              compact=$(curl -sS -H "Authorization: Bearer $LICHESS_TOKEN" -H "Accept: application/json" \
                -w "\n%{http_code}\n%{content_type}" \
                "https://lichess.org/api/tournament/$TOURNAMENT_ID" || true)

              body=$(echo "$compact" | sed '$d' | sed '$d' || true)
              code=$(echo "$compact" | tail -n2 | head -n1)
              ctype=$(echo "$compact" | tail -n1)

              echo "Polled tournament: HTTP $code   content-type: $ctype"
              [ -n "$body" ] && echo "Body preview:" && echo "$body" | sed -n '1,80p'

              if [ "$code" != "200" ]; then
                echo "Non-200 response fetching tournament (HTTP $code). Retrying in 5s..."
                sleep 5
                continue
              fi

              if ! echo "$ctype" | grep -qi 'application/json'; then
                echo "Content-type not JSON ($ctype). Likely HTML or login page — check token/header."
                exit 1
              fi

              json_status=$(echo "$body" | jq -r '.status // empty' 2>/dev/null || true)
              if [ -n "$json_status" ]; then
                status="$json_status"
              else
                is_started=$(echo "$body" | jq -r '.isStarted // empty' 2>/dev/null || true)
                status=$([ "$is_started" = "true" ] && echo "started" || echo "created")
              fi

              echo "Determined tournament status: $status"

              if [ "$status" = "created" ]; then
                echo "Tournament not started yet -> start matchmaking while we wait."
                python3 -u user_interface.py --config "$CONFIG_FILE" matchmaking &
                MM_PID=$!
                # wait for tournament start
                while true; do
                  new_status=$(curl -sS -H "Authorization: Bearer $LICHESS_TOKEN" -H "Accept: application/json" \
                    "https://lichess.org/api/tournament/$TOURNAMENT_ID" | jq -r '.status // (if .isStarted then "started" else "created" end)')
                  echo "Waiting poll -> status: $new_status"
                  if [ "$new_status" != "created" ]; then
                    echo "Status changed -> $new_status. Stopping matchmaking."
                    [ -n "${MM_PID:-}" ] && kill -SIGTERM "$MM_PID" || true
                    wait "${MM_PID:-}" 2>/dev/null || true
                    break
                  fi
                  sleep 5
                done
              fi

              if [ "$status" = "started" ]; then
                echo "Tournament is started. Attempting to join..."
                joined=1
                for i in 1 2 3 4 5; do
                  echo "Join attempt #$i"
                  if join_tournament "$TOURNAMENT_ID" "$TEAM_ID"; then
                    joined=0
                    break
                  fi
                  sleep 3
                done
                [ $joined -ne 0 ] && echo "WARNING: join attempts failed."

                echo "Launching tournament mode..."
                CMD="python3 -u user_interface.py --config $CONFIG_FILE tournament $TOURNAMENT_ID $TEAM_ID"
                [ -n "$ADDITIONAL_CMD" ] && CMD="$CMD $ADDITIONAL_CMD"
                echo "CMD: $CMD"
                eval "$CMD"
                echo "Tournament mode ended."
                break
              fi

              if [ "$status" = "finished" ]; then
                echo "Tournament finished already -> starting matchmaking."
                python3 -u user_interface.py --config "$CONFIG_FILE" matchmaking
                break
              fi

              echo "Unhandled status ($status). Retrying in 5s..."
              sleep 5
            done
          else
            echo "No tournament specified -> starting matchmaking only."
            python3 -u user_interface.py --config $CONFIG_FILE matchmaking
          fi
